{"ast":null,"code":"import _slicedToArray from\"/home/user/Desktop/myProjects/lisa-supermarket-website/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useContext}from\"react\";import{useEffect}from\"react\";import{NavLink}from\"react-router-dom\";import AccountCircleIcon from\"@mui/icons-material/AccountCircle\";import{MyContext}from\"../../../App\";import{useNavigate}from\"react-router-dom\";import MobileNav from\"./MobileNav\";import DesktopNav from\"./DesktopNav\";import\"../navbar/styleNavigation.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Navigation(props){var _useContext=useContext(MyContext),user=_useContext.user,setUser=_useContext.setUser,setIsLoggedIn=_useContext.setIsLoggedIn,isLoggedIn=_useContext.isLoggedIn,setToken=_useContext.setToken,setCart=_useContext.setCart;// 1) First, I Added Two New State Variables to the Navigation Component\n// The mobileNavOpen state is in charge of knowing when to display the *** mobile nav links *** to a user.\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),mobileNavOpen=_useState2[0],setMobileNavOpen=_useState2[1];// The showMobileNavMenu to show the **hamburger** bar for the mobile menu or not.\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),showMobileNavMenu=_useState4[0],setShowMobileNavMenu=_useState4[1];// 2) Next, I Added a useEffect to Track Initial Viewport Size\n//  useEffect to check on component load if a user should be shown the large nav bar across the top or the more compact hamburger nav menu icon.\nuseEffect(function(){if(window.innerWidth>750){setShowMobileNavMenu(false);}else if(window.innerWidth<750){setShowMobileNavMenu(true);}},[]);// 3) Finally, Track All Other Browser Size Changes Inside a Second useEffect\nuseEffect(function(){var handleRezise=function handleRezise(){if(window.innerWidth>750){setShowMobileNavMenu(false);setMobileNavOpen(false);}else if(window.innerWidth<750){setShowMobileNavMenu(true);}};window.addEventListener(\"resize\",handleRezise);return function(){window.removeEventListener(\"resize\",handleRezise);};},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"navBar\",children:[/*#__PURE__*/_jsx(NavLink,{to:\"/\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"nav-logo\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logoImg\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"BioBites\"})]})}),showMobileNavMenu===true?/*#__PURE__*/_jsx(MobileNav,{isLoggedIn:props.isLoggedIn}):/*#__PURE__*/_jsx(DesktopNav,{isLoggedIn:props.isLoggedIn})]});}","map":{"version":3,"names":["React","useState","useContext","useEffect","NavLink","AccountCircleIcon","MyContext","useNavigate","MobileNav","DesktopNav","Navigation","props","user","setUser","setIsLoggedIn","isLoggedIn","setToken","setCart","mobileNavOpen","setMobileNavOpen","showMobileNavMenu","setShowMobileNavMenu","window","innerWidth","handleRezise","addEventListener","removeEventListener"],"sources":["/home/user/Desktop/myProjects/lisa-supermarket-website/frontend/src/components/globalComponents/navbar/Navigation.jsx"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\nimport { MyContext } from \"../../../App\";\nimport { useNavigate } from \"react-router-dom\";\nimport MobileNav from \"./MobileNav\";\nimport DesktopNav from \"./DesktopNav\";\nimport \"../navbar/styleNavigation.scss\";\n\nexport default function Navigation(props) {\n  const { user, setUser, setIsLoggedIn, isLoggedIn, setToken, setCart } =\n    useContext(MyContext);\n\n  // 1) First, I Added Two New State Variables to the Navigation Component\n\n  // The mobileNavOpen state is in charge of knowing when to display the *** mobile nav links *** to a user.\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n\n  // The showMobileNavMenu to show the **hamburger** bar for the mobile menu or not.\n  const [showMobileNavMenu, setShowMobileNavMenu] = useState(false);\n\n  // 2) Next, I Added a useEffect to Track Initial Viewport Size\n\n  //  useEffect to check on component load if a user should be shown the large nav bar across the top or the more compact hamburger nav menu icon.\n  useEffect(() => {\n    if (window.innerWidth > 750) {\n      setShowMobileNavMenu(false);\n    } else if (window.innerWidth < 750) {\n      setShowMobileNavMenu(true);\n    }\n  }, []);\n\n  // 3) Finally, Track All Other Browser Size Changes Inside a Second useEffect\n\n  useEffect(() => {\n    const handleRezise = () => {\n      if (window.innerWidth > 750) {\n        setShowMobileNavMenu(false);\n        setMobileNavOpen(false);\n      } else if (window.innerWidth < 750) {\n        setShowMobileNavMenu(true);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleRezise);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleRezise);\n    };\n  }, []);\n\n  return (\n    <div className=\"navBar\">\n      {/* logo */}\n      <NavLink to=\"/\">\n        <span className=\"nav-logo\">\n          <div className=\"logoImg\" />\n          <h1>BioBites</h1>\n        </span>\n      </NavLink>\n\n      {showMobileNavMenu === true ? (\n        <MobileNav isLoggedIn={props.isLoggedIn} />\n      ) : (\n        <DesktopNav isLoggedIn={props.isLoggedIn} />\n      )}\n    </div>\n  );\n}\n"],"mappings":"qJAAA,MAAOA,MAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,KAA4C,OAA5C,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,OAASC,OAAT,KAAwB,kBAAxB,CACA,MAAOC,kBAAP,KAA8B,mCAA9B,CACA,OAASC,SAAT,KAA0B,cAA1B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,MAAOC,UAAP,KAAsB,aAAtB,CACA,MAAOC,WAAP,KAAuB,cAAvB,CACA,MAAO,gCAAP,C,wFAEA,cAAe,SAASC,WAAT,CAAoBC,KAApB,CAA2B,CACxC,gBACET,UAAU,CAACI,SAAD,CADZ,CAAQM,IAAR,aAAQA,IAAR,CAAcC,OAAd,aAAcA,OAAd,CAAuBC,aAAvB,aAAuBA,aAAvB,CAAsCC,UAAtC,aAAsCA,UAAtC,CAAkDC,QAAlD,aAAkDA,QAAlD,CAA4DC,OAA5D,aAA4DA,OAA5D,CAGA;AAEA;AACA,cAA0ChB,QAAQ,CAAC,KAAD,CAAlD,wCAAOiB,aAAP,eAAsBC,gBAAtB,eAEA;AACA,eAAkDlB,QAAQ,CAAC,KAAD,CAA1D,yCAAOmB,iBAAP,eAA0BC,oBAA1B,eAEA;AAEA;AACAlB,SAAS,CAAC,UAAM,CACd,GAAImB,MAAM,CAACC,UAAP,CAAoB,GAAxB,CAA6B,CAC3BF,oBAAoB,CAAC,KAAD,CAApB,CACD,CAFD,IAEO,IAAIC,MAAM,CAACC,UAAP,CAAoB,GAAxB,CAA6B,CAClCF,oBAAoB,CAAC,IAAD,CAApB,CACD,CACF,CANQ,CAMN,EANM,CAAT,CAQA;AAEAlB,SAAS,CAAC,UAAM,CACd,GAAMqB,aAAY,CAAG,QAAfA,aAAe,EAAM,CACzB,GAAIF,MAAM,CAACC,UAAP,CAAoB,GAAxB,CAA6B,CAC3BF,oBAAoB,CAAC,KAAD,CAApB,CACAF,gBAAgB,CAAC,KAAD,CAAhB,CACD,CAHD,IAGO,IAAIG,MAAM,CAACC,UAAP,CAAoB,GAAxB,CAA6B,CAClCF,oBAAoB,CAAC,IAAD,CAApB,CACD,CACF,CAPD,CASAC,MAAM,CAACG,gBAAP,CAAwB,QAAxB,CAAkCD,YAAlC,EAEA,MAAO,WAAM,CACXF,MAAM,CAACI,mBAAP,CAA2B,QAA3B,CAAqCF,YAArC,EACD,CAFD,CAGD,CAfQ,CAeN,EAfM,CAAT,CAiBA,mBACE,aAAK,SAAS,CAAC,QAAf,wBAEE,KAAC,OAAD,EAAS,EAAE,CAAC,GAAZ,uBACE,cAAM,SAAS,CAAC,UAAhB,wBACE,YAAK,SAAS,CAAC,SAAf,EADF,cAEE,gCAFF,GADF,EAFF,CASGJ,iBAAiB,GAAK,IAAtB,cACC,KAAC,SAAD,EAAW,UAAU,CAAET,KAAK,CAACI,UAA7B,EADD,cAGC,KAAC,UAAD,EAAY,UAAU,CAAEJ,KAAK,CAACI,UAA9B,EAZJ,GADF,CAiBD"},"metadata":{},"sourceType":"module"}