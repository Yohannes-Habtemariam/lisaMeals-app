{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/myProjects/lisa-supermarket-website/frontend/src/components/globalComponents/navbar/Navigation.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\nimport { MyContext } from \"../../../App\";\nimport { useNavigate } from \"react-router-dom\";\nimport MobileNav from \"./MobileNav\";\nimport DesktopNav from \"./DesktopNav\";\nimport \"../navbar/styleNavigation.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Navigation(props) {\n  _s();\n\n  const {\n    user,\n    setUser,\n    setIsLoggedIn,\n    isLoggedIn,\n    setToken,\n    setCart\n  } = useContext(MyContext); // 1) First, I Added Two New State Variables to the Navigation Component\n  // The mobileNavOpen state is in charge of knowing when to display the *** mobile nav links *** to a user.\n\n  const [mobileNavOpen, setMobileNavOpen] = useState(false); // The showMobileNavMenu to show the **hamburger** bar for the mobile menu or not.\n\n  const [showMobileNavMenu, setShowMobileNavMenu] = useState(false); // 2) Next, I Added a useEffect to Track Initial Viewport Size\n  //  useEffect to check on component load if a user should be shown the large nav bar across the top or the more compact hamburger nav menu icon.\n\n  useEffect(() => {\n    if (window.innerWidth > 750) {\n      setShowMobileNavMenu(false);\n    } else if (window.innerWidth < 750) {\n      setShowMobileNavMenu(true);\n    }\n  }, []); // 3) Finally, Track All Other Browser Size Changes Inside a Second useEffect\n\n  useEffect(() => {\n    const handleRezise = () => {\n      if (window.innerWidth > 750) {\n        setShowMobileNavMenu(false);\n        setMobileNavOpen(false);\n      } else if (window.innerWidth < 750) {\n        setShowMobileNavMenu(true);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleRezise);\n    return () => {\n      window.removeEventListener(\"resize\", handleRezise);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"navBar\",\n    children: [/*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"nav-logo\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logoImg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"BioBites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), showMobileNavMenu === true ? /*#__PURE__*/_jsxDEV(MobileNav, {\n      isLoggedIn: props.isLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DesktopNav, {\n      isLoggedIn: props.isLoggedIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Navigation, \"gddIPdHdZ9u89FY0KsVptik4S/A=\");\n\n_c = Navigation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navigation\");","map":{"version":3,"names":["React","useState","useContext","useEffect","NavLink","AccountCircleIcon","MyContext","useNavigate","MobileNav","DesktopNav","Navigation","props","user","setUser","setIsLoggedIn","isLoggedIn","setToken","setCart","mobileNavOpen","setMobileNavOpen","showMobileNavMenu","setShowMobileNavMenu","window","innerWidth","handleRezise","addEventListener","removeEventListener"],"sources":["/home/user/Desktop/myProjects/lisa-supermarket-website/frontend/src/components/globalComponents/navbar/Navigation.jsx"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\nimport { MyContext } from \"../../../App\";\nimport { useNavigate } from \"react-router-dom\";\nimport MobileNav from \"./MobileNav\";\nimport DesktopNav from \"./DesktopNav\";\nimport \"../navbar/styleNavigation.scss\";\n\nexport default function Navigation(props) {\n  const { user, setUser, setIsLoggedIn, isLoggedIn, setToken, setCart } =\n    useContext(MyContext);\n\n  // 1) First, I Added Two New State Variables to the Navigation Component\n\n  // The mobileNavOpen state is in charge of knowing when to display the *** mobile nav links *** to a user.\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\n\n  // The showMobileNavMenu to show the **hamburger** bar for the mobile menu or not.\n  const [showMobileNavMenu, setShowMobileNavMenu] = useState(false);\n\n  // 2) Next, I Added a useEffect to Track Initial Viewport Size\n\n  //  useEffect to check on component load if a user should be shown the large nav bar across the top or the more compact hamburger nav menu icon.\n  useEffect(() => {\n    if (window.innerWidth > 750) {\n      setShowMobileNavMenu(false);\n    } else if (window.innerWidth < 750) {\n      setShowMobileNavMenu(true);\n    }\n  }, []);\n\n  // 3) Finally, Track All Other Browser Size Changes Inside a Second useEffect\n\n  useEffect(() => {\n    const handleRezise = () => {\n      if (window.innerWidth > 750) {\n        setShowMobileNavMenu(false);\n        setMobileNavOpen(false);\n      } else if (window.innerWidth < 750) {\n        setShowMobileNavMenu(true);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleRezise);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleRezise);\n    };\n  }, []);\n\n  return (\n    <div className=\"navBar\">\n      {/* logo */}\n      <NavLink to=\"/\">\n        <span className=\"nav-logo\">\n          <div className=\"logoImg\" />\n          <h1>BioBites</h1>\n        </span>\n      </NavLink>\n\n      {showMobileNavMenu === true ? (\n        <MobileNav isLoggedIn={props.isLoggedIn} />\n      ) : (\n        <DesktopNav isLoggedIn={props.isLoggedIn} />\n      )}\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,gCAAP;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EAAA;;EACxC,MAAM;IAAEC,IAAF;IAAQC,OAAR;IAAiBC,aAAjB;IAAgCC,UAAhC;IAA4CC,QAA5C;IAAsDC;EAAtD,IACJf,UAAU,CAACI,SAAD,CADZ,CADwC,CAIxC;EAEA;;EACA,MAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,KAAD,CAAlD,CAPwC,CASxC;;EACA,MAAM,CAACmB,iBAAD,EAAoBC,oBAApB,IAA4CpB,QAAQ,CAAC,KAAD,CAA1D,CAVwC,CAYxC;EAEA;;EACAE,SAAS,CAAC,MAAM;IACd,IAAImB,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;MAC3BF,oBAAoB,CAAC,KAAD,CAApB;IACD,CAFD,MAEO,IAAIC,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;MAClCF,oBAAoB,CAAC,IAAD,CAApB;IACD;EACF,CANQ,EAMN,EANM,CAAT,CAfwC,CAuBxC;;EAEAlB,SAAS,CAAC,MAAM;IACd,MAAMqB,YAAY,GAAG,MAAM;MACzB,IAAIF,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;QAC3BF,oBAAoB,CAAC,KAAD,CAApB;QACAF,gBAAgB,CAAC,KAAD,CAAhB;MACD,CAHD,MAGO,IAAIG,MAAM,CAACC,UAAP,GAAoB,GAAxB,EAA6B;QAClCF,oBAAoB,CAAC,IAAD,CAApB;MACD;IACF,CAPD;;IASAC,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;IAEA,OAAO,MAAM;MACXF,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC;IACD,CAFD;EAGD,CAfQ,EAeN,EAfM,CAAT;EAiBA,oBACE;IAAK,SAAS,EAAC,QAAf;IAAA,wBAEE,QAAC,OAAD;MAAS,EAAE,EAAC,GAAZ;MAAA,uBACE;QAAM,SAAS,EAAC,UAAhB;QAAA,wBACE;UAAK,SAAS,EAAC;QAAf;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF,EASGJ,iBAAiB,KAAK,IAAtB,gBACC,QAAC,SAAD;MAAW,UAAU,EAAET,KAAK,CAACI;IAA7B;MAAA;MAAA;MAAA;IAAA,QADD,gBAGC,QAAC,UAAD;MAAY,UAAU,EAAEJ,KAAK,CAACI;IAA9B;MAAA;MAAA;MAAA;IAAA,QAZJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD;;GA3DuBL,U;;KAAAA,U"},"metadata":{},"sourceType":"module"}